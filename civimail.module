<?php

/**
 * @file
 * Contains civimail.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements hook_help().
 */
function civimail_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the civimail module.
    case 'help.page.civimail':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Integration with CiviCRM CiviMail.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function civimail_theme() {
  return [
    'entity_mailing' => [
      'render element' => 'elements',
    ],
    // @todo set template suggestions
    'civimail_html' => [
      'variables' => [
        'entity' => NULL,
        'body' => NULL,
        'absolute_link' => NULL,
        'translation_links' => NULL,
        'civicrm_header' => NULL,
        'civicrm_footer' => NULL,
        'civicrm_unsubscribe_url' => NULL,
      ],
      'render element' => 'children',
    ],
    'civimail_text' => [
      'variables' => [
        'entity' => NULL,
        'body' => NULL,
        'absolute_url' => NULL,
        'translation_urls' => NULL,
        'civicrm_header' => NULL,
        'civicrm_footer' => NULL,
        'civicrm_unsubscribe_url' => NULL,
      ],
      'render element' => 'children',
    ],
  ];
}

/**
 * Prepares variables for entity mailing templates.
 *
 * Default template: entity-mailing.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the components of the page
 *     - #entity: The entity that is the subject of the mailing.
 *     - #entity_send_form: A form to send the entity to CiviCRM groups.
 *     - #sent_mailings: The table of already sent mailings for this entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_entity_mailing(array &$variables) {
  $variables['entity'] = $variables['elements']['#entity'];
  $variables['entity_send_form'] = $variables['elements']['#entity_send_form'];
  $variables['sent_mailings'] = $variables['elements']['#sent_mailings'];

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $variables['entity'];
  if ($entity instanceof ContentEntityInterface) {
    $variables['title'] = $variables['entity']->label();
  }

  // @todo add helper variables.
  // Helpful $content variable for templates.
  $variables['content'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_mail().
 */
function civimail_mail($key, &$message, $params) {
  switch ($key) {
    case 'entity_test_mail':
      // Customize from mail and name.
      // Override from related headers, leave others to mime mail.
      // @todo probably check if MimeMail is installed
      $message['headers']['From'] = $params['from_name'] . ' <' . $params['from_mail'] . '>';
      // Currently overridden by default.
      $message['headers']['Sender'] = $params['from_mail'];
      // Currently overridden by default.
      $message['headers']['Return-Path'] = $params['from_mail'];
      // Override Drupal related from keys.
      $message['from'] = $params['from_mail'];
      // Currently overridden by default.
      $message['reply-to'] = $params['from_mail'];

      // Set's the message subject and body as configured.
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Return civimail's settings for an entity type bundle.
 *
 * @param string $setting
 *   One of the civimail_available_entity_bundle_settings(), e.g. 'groups'.
 *   If 'all' is passed, all available settings are returned.
 * @param string $entity_type_id
 *   The id of the entity type to return settings for.
 * @param string $bundle
 *   The id of the bundle to return settings for.
 *
 * @return string|array
 *   The value of the given setting or an array of all settings.
 */
function civimail_get_entity_bundle_settings($setting, $entity_type_id, $bundle) {
  $config = \Drupal::configFactory()->getEditable('civimail.settings');
  $settings = unserialize($config->get('civimail_bundle.' . $entity_type_id . '.' . $bundle));
  if (empty($settings)) {
    $settings = [];
  }
  $settings += civimail_get_entity_bundle_setting_defaults();

  if ($setting == 'all') {
    return $settings;
  }

  return isset($settings[$setting]) ? $settings[$setting] : NULL;
}

/**
 * Save civimail settings of an entity type bundle.
 *
 * @param array $settings
 *   The civimail_available_entity_bundle_settings().
 * @param string $entity_type_id
 *   The id of the entity type to set the settings for.
 * @param string $bundle
 *   The id of the bundle to set the settings for.
 */
function civimail_set_entity_bundle_settings(array $settings, $entity_type_id, $bundle) {
  $config = \Drupal::configFactory()->getEditable('civimail.settings');
  // Do not store default values.
  foreach (civimail_get_entity_bundle_setting_defaults() as $setting => $default_value) {
    if (isset($settings[$setting]) && $settings[$setting] == $default_value) {
      unset($settings[$setting]);
    }
  }
  $config->set('civimail_bundle.' . $entity_type_id . '.' . $bundle, serialize($settings));
  $config->save();
}

/**
 * Returns civimail entity type bundle available settings.
 *
 * @return array
 *   List of entity bundle available settings.
 */
function civimail_available_entity_bundle_settings() {
  return [
    'enabled',
    'groups',
    'view_mode',
  ];
}

/**
 * Defines default values for civimail settings.
 *
 * @return array
 *   List of entity bundle default settings.
 */
function civimail_get_entity_bundle_setting_defaults() {
  $defaults = [];
  $defaults['enabled'] = FALSE;
  $defaults['groups'] = [];
  $defaults['view_mode'] = 'default';
  return $defaults;
}
